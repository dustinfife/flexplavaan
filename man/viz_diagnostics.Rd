% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/viz_diagnostics.R
\name{viz_diagnostics}
\alias{viz_diagnostics}
\title{Visualize Diagnostics for a lavaan object}
\usage{
viz_diagnostics(
  data,
  mapping,
  fit.lavaan,
  fit.lavaan2 = NULL,
  invert.map = FALSE,
  alpha = 0.5,
  plot = c("trace", "disturbance", "histogram"),
  ...
)
}
\arguments{
\item{data}{The dataset containing the raw (item) observations}

\item{mapping}{A ggplot-defined mapping (e.g., \code{aes(x=x, y=y)}).}

\item{fit.lavaan}{A fitted \code{\link{lavaan::lavaan}} object}

\item{invert.map}{Should the x/y axes be flipped in the mapping? This is important when using viz_diagnostics
within \code{\link{GGally::ggpairs}}, otherwise the residuals don't match the "trace" plots.}

\item{alpha}{The transparency of the datapoints in the scatterplot. Defaults to 0.5}

\item{plot}{One of the following: "trace" or "disturbance"}

\item{...}{Other arguments passed to \code{\link{ggplot2::ggplot}}}
}
\value{
a plot of the desired relationship
}
\description{
This function visualizes pairwise relationships between items in a lavaan
object. The user can specify whether to display "trace" or "disturbance" plots 
Trace plots will show the scatterplot between pairs of items (defined via the mapping argument)
with the model-implied fit overlaying the raw data. If the line fails to pass through the more
concentrated parts of the data, this will indicate misfit. The disturbance plots (or
disturbance-dependence plots) will show the relationship between the two items after 
removing the model-implied effects. If any relationship remains, it suggests the model failed
to capture important information.
}
\examples{
# fit a correctly specified model
require(lavaan)
data("correct_large")
data("crossloadings_large")

model = "
f1 =~ x1 + x2 + x3
f2 =~ y1 + y2 + y3
f1 ~ f2
"
  fit.lavaan = cfa(model, data=correct_large)
  viz_diagnostics(data = correct_large, mapping = aes(x1, x2), fit.lavaan, plot="trace")
  viz_diagnostics(data = correct_large, mapping = aes(x1, x2), fit.lavaan, plot="disturbance")
  viz_diagnostics(data = correct_large, mapping = aes(x1, y2), fit.lavaan, plot="trace")
  viz_diagnostics(data = correct_large, mapping = aes(x1, y2), fit.lavaan, plot="disturbance")  
  
  viz_diagnostics(data = crossloadings_large, mapping = aes(x1, x2), fit.lavaan, plot="trace")
  viz_diagnostics(data = crossloadings_large, mapping = aes(x1, x2), fit.lavaan, plot="disturbance")
  viz_diagnostics(data = crossloadings_large, mapping = aes(x1, y1), fit.lavaan, plot="trace")
  viz_diagnostics(data = crossloadings_large, mapping = aes(x1, y1), fit.lavaan, plot="disturbance")  


data("mugglevwizard")
### fit measurement model
model_witch = '
witch =~ a*strange + b*relatives + c*wingardium

witch ~~ witch
'
require(lavaan)
mod = cfa(model_witch, data=mugglevwizard)
viz_diagnostics(data = mugglevwizard, mapping = aes(wingardium, strange), fit.lavaan = mod, plot="trace")
viz_diagnostics(data = mugglevwizard, mapping = aes(wingardium, relatives), fit.lavaan = mod, plot="trace")
expect_error(viz_diagnostics(data = mugglevwizard, mapping = aes(wingardium, darkarts), fit.lavaan = mod, plot="trace"))


model_witch = "
witch =~ a*strange + b*relatives + c*wingardium
owl =~ d*darkarts + e*potions + f*history
witch ~ owl
witch ~~ witch
owl ~~ owl
"
mod = cfa(model_witch, data=mugglevwizard)
viz_diagnostics(data = mugglevwizard, mapping = aes(wingardium, darkarts), fit.lavaan = mod, plot="trace")
viz_diagnostics(data = mugglevwizard, mapping = aes(potions, darkarts), fit.lavaan = mod, plot="disturbance")
}
